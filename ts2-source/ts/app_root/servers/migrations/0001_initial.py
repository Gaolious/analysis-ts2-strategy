# Generated by Django 4.1.4 on 2023-01-20 02:56

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EndPoint',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('name', models.CharField(max_length=255, verbose_name='version')),
                ('name_hash', models.BigIntegerField(db_index=True, default=0, verbose_name='name hash')),
                ('url', models.CharField(max_length=255, verbose_name='version')),
            ],
            options={
                'verbose_name': 'Endpoint',
                'verbose_name_plural': 'Endpoints',
            },
        ),
        migrations.CreateModel(
            name='RunVersion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('task_status', models.PositiveSmallIntegerField(choices=[(10, 'in queued'), (20, 'in processing'), (30, 'error'), (40, 'completed')], default=10, verbose_name='status of crawling task')),
                ('queued_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='queued datetime')),
                ('processing_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='processing datetime')),
                ('error_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='error datetime')),
                ('completed_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='completed datetime')),
                ('player_id', models.CharField(max_length=50, verbose_name='PlayerId')),
                ('player_name', models.CharField(max_length=50, verbose_name='PlayerName')),
                ('next_event_datetime', models.DateTimeField(default=None, null=True, verbose_name='next event datetime')),
                ('command_no', models.IntegerField(blank=True, default=1, verbose_name='Command No')),
                ('is_completed', models.BooleanField(blank=True, default=False, verbose_name='is completed')),
                ('has_error', models.BooleanField(blank=True, default=False, verbose_name='has error')),
                ('ep_sent', models.DateTimeField(default=None, null=True, verbose_name='Endpoint Sent Datetime')),
                ('ep_server', models.DateTimeField(default=None, null=True, verbose_name='Endpoint Server Datetime')),
                ('ep_recv', models.DateTimeField(default=None, null=True, verbose_name='Endpoint Recv Datetime')),
                ('login_sent', models.DateTimeField(default=None, null=True, verbose_name='Login Sent Datetime')),
                ('login_server', models.DateTimeField(default=None, null=True, verbose_name='Login Server Datetime')),
                ('login_recv', models.DateTimeField(default=None, null=True, verbose_name='Login Recv Datetime')),
                ('sd_sent', models.DateTimeField(default=None, null=True, verbose_name='SQL Definition Sent Datetime')),
                ('sd_server', models.DateTimeField(default=None, null=True, verbose_name='SQL Definition Server Datetime')),
                ('sd_recv', models.DateTimeField(default=None, null=True, verbose_name='SQL Definition Recv Datetime')),
                ('init_sent', models.DateTimeField(default=None, null=True, verbose_name='Init Data Sent Datetime')),
                ('init_server', models.DateTimeField(default=None, null=True, verbose_name='Init Data Server Datetime')),
                ('init_recv', models.DateTimeField(default=None, null=True, verbose_name='Init Data Recv Datetime')),
            ],
            options={
                'verbose_name': 'Version',
                'verbose_name_plural': 'Versions',
            },
        ),
        migrations.CreateModel(
            name='SQLDefinition',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('task_status', models.PositiveSmallIntegerField(choices=[(10, 'in queued'), (20, 'in processing'), (30, 'error'), (40, 'completed')], default=10, verbose_name='status of crawling task')),
                ('queued_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='queued datetime')),
                ('processing_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='processing datetime')),
                ('error_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='error datetime')),
                ('completed_datetime', models.DateTimeField(blank=True, default=None, null=True, verbose_name='completed datetime')),
                ('version', models.CharField(max_length=20, verbose_name='version')),
                ('checksum', models.CharField(max_length=50, verbose_name='checksum')),
                ('url', models.URLField(verbose_name='download url')),
                ('download_path', models.CharField(max_length=200, verbose_name='checksum')),
            ],
            options={
                'verbose_name': 'Definition',
                'verbose_name_plural': 'Definitions',
            },
        ),
        migrations.CreateModel(
            name='TSArticle',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('content_category', models.IntegerField(choices=[(1, '기본'), (2, '이벤트'), (3, '유니언')], default=0, verbose_name='content category')),
                ('level_req', models.IntegerField(default=0, verbose_name='level required')),
                ('level_from', models.IntegerField(default=0, verbose_name='level from')),
                ('type', models.IntegerField(default=0, verbose_name='type')),
                ('event', models.IntegerField(default=0, verbose_name='event')),
                ('sprite', models.CharField(max_length=255, null=True, verbose_name='sprite id')),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='TSFactory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('content_category', models.IntegerField(choices=[(1, '기본'), (2, '이벤트'), (3, '유니언')], default=0, verbose_name='content category')),
                ('level_req', models.IntegerField(default=0, verbose_name='level required')),
                ('level_from', models.IntegerField(default=0, verbose_name='level from')),
                ('starting_slot_count', models.IntegerField(default=0, verbose_name='starting_slot_count')),
                ('max_slot_count', models.IntegerField(default=0, verbose_name='max_slot_count')),
                ('type', models.IntegerField(default=0, verbose_name='type')),
                ('asset_name', models.CharField(max_length=255, verbose_name='asset_name')),
                ('sprite', models.CharField(max_length=255, verbose_name='sprite id')),
            ],
            options={
                'verbose_name': 'Factory',
                'verbose_name_plural': 'Factories',
            },
        ),
        migrations.CreateModel(
            name='TSLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('region', models.IntegerField(default=0, verbose_name='region')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
            },
        ),
        migrations.CreateModel(
            name='TSRegion',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('content_category', models.IntegerField(choices=[(1, '기본'), (2, '이벤트'), (3, '유니언')], default=0, verbose_name='content category')),
                ('level_from', models.IntegerField(default=0, verbose_name='level from')),
                ('asset_name', models.CharField(max_length=255, verbose_name='sprite id')),
                ('gold_amount_coefficient', models.IntegerField(default=0, verbose_name='gold_amount_coefficient')),
                ('train_upgrade_price_coefficient', models.DecimalField(blank=True, decimal_places=10, default=Decimal('0.0'), max_digits=30, verbose_name='train_upgrade_price_coefficient')),
                ('city_currency_coefficient', models.IntegerField(default=0, verbose_name='city_currency_coefficient')),
                ('ordering', models.IntegerField(default=0, verbose_name='ordering')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='TSTrain',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('content_category', models.IntegerField(choices=[(1, '기본'), (2, '이벤트'), (3, '유니언')], default=0, verbose_name='content category')),
                ('rarity', models.IntegerField(choices=[(1, '일반'), (2, '레어'), (3, '에픽'), (4, '전설')], default=0, verbose_name='rarity')),
                ('era', models.IntegerField(choices=[(1, '스팀'), (2, '디젤'), (3, '전기')], default=0, verbose_name='era')),
                ('reward', models.BooleanField(default=False, verbose_name='reward')),
                ('region', models.IntegerField(default=0, verbose_name='region')),
                ('max_level', models.IntegerField(default=0, verbose_name='max_level')),
                ('asset_name', models.CharField(max_length=255, verbose_name='asset_name')),
            ],
            options={
                'verbose_name': 'Train',
                'verbose_name_plural': 'Trains',
            },
        ),
        migrations.CreateModel(
            name='TSTrainLevel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('train_level', models.IntegerField(default=0, verbose_name='train_level')),
                ('power', models.CharField(max_length=255, verbose_name='power')),
            ],
            options={
                'verbose_name': 'Train Level',
                'verbose_name_plural': 'Train Levels',
            },
        ),
        migrations.CreateModel(
            name='TSUserLevel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('xp', models.IntegerField(default=0, verbose_name='XP')),
                ('rewards', models.CharField(default='', max_length=255, verbose_name='rewards')),
            ],
            options={
                'verbose_name': 'User Level',
                'verbose_name_plural': 'User Levels',
            },
        ),
        migrations.CreateModel(
            name='TSWarehouseLevel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('capacity', models.IntegerField(default=0, verbose_name='capacity')),
                ('upgrade_article_ids', models.CharField(default='', max_length=255, verbose_name='upgrade_article_ids')),
                ('upgrade_article_amounts', models.CharField(default='', max_length=255, verbose_name='upgrade_article_amounts')),
            ],
            options={
                'verbose_name': 'Warehouse Level',
                'verbose_name_plural': 'Warehouse Levels',
            },
        ),
        migrations.CreateModel(
            name='TSProduct',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('article_amount', models.IntegerField(default=0, verbose_name='article_amount')),
                ('craft_time', models.IntegerField(default=0, verbose_name='craft_time')),
                ('article_ids', models.CharField(max_length=255, verbose_name='article_ids')),
                ('article_amounts', models.CharField(max_length=255, verbose_name='article_amounts')),
                ('level_req', models.IntegerField(default=0, verbose_name='level required')),
                ('level_from', models.IntegerField(default=0, verbose_name='level from')),
                ('article', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tsarticle')),
                ('factory', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tsfactory')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='TSJobLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('local_key', models.CharField(default='', max_length=255, verbose_name='local key')),
                ('name_local_key', models.CharField(default='', max_length=255, null=True, verbose_name='local key')),
                ('contractor_id', models.IntegerField(default=0, verbose_name='Contractor ID')),
                ('location', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tslocation')),
                ('region', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tsregion')),
            ],
            options={
                'verbose_name': 'Job Location',
                'verbose_name_plural': 'Job Locations',
            },
        ),
        migrations.CreateModel(
            name='TSDestination',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(blank=True, editable=False, verbose_name='created date')),
                ('modified', models.DateTimeField(blank=True, editable=False, verbose_name='modified date')),
                ('sprite', models.CharField(max_length=255, null=True, verbose_name='sprite id')),
                ('time', models.IntegerField(default=0, verbose_name='time')),
                ('travel_duration', models.IntegerField(default=0, verbose_name='travel_duration')),
                ('multiplier', models.IntegerField(default=0, verbose_name='multiplier')),
                ('refresh_time', models.IntegerField(default=0, verbose_name='refresh_time')),
                ('train_limit', models.IntegerField(default=0, verbose_name='train_limit')),
                ('capacity', models.IntegerField(default=0, verbose_name='capacity')),
                ('requirements', models.CharField(max_length=255, verbose_name='requirements')),
                ('article', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tsarticle')),
                ('location', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tslocation')),
                ('region', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='servers.tsregion')),
            ],
            options={
                'verbose_name': 'Destination',
                'verbose_name_plural': 'Destinations',
            },
        ),
    ]
